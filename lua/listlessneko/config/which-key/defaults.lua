return {
  -- <leader>
  mode = { "n", "v" },
  -- a = "Swap next param",
  -- A = "Swap previous param",
  -- o = { require("telescope.builtin").buffers, "Open Buffer" },
  -- W = { "<cmd>noautocmd w<cr>", "Save without formatting (noautocmd)" },
  { "<leader>",
    group = { name = "Leader" },
    { "<leader>;", ":Alpha<CR>", desc = "Dashboard" },
    { "<leader>w", ":w!<CR>", desc = "Save" },
    { "<leader>q", ":confirm q<CR>", desc = "Quit" },
    { "<leader>f", require("listlessneko.config.utils").telescope_git_or_file, desc = "Find Files (Root)" },
    { "<leader>v", desc = "Go to definition in a split" },
    { "<leader>a", desc = "Swap next param" },
    { "<leader>A", desc = "Swap previous param" },
    { "<leader>o", require("telescope.builtin").buffers, desc = "Open Buffer" },
    { "<leader>W", "<cmd>noautocmd w<cr>", desc = "Save without formatting (noautocmd)" },
    { "<leader>br", "<cmd>Git status<CR>", desc = "Git Status" },
  },

  -- (s)earch
  {
    "<leader>s",
    group = { name = "Search" },
    { "<leader>sf", "<cmd>Telescope find_files<cr>", desc = "Find File (CWD)" },
    { "<leader>sh", "<cmd>Telescope help_tags<cr>", desc = "Find Help" },
    { "<leader>sH", "<cmd>Telescope highlights<cr>", desc = "Find highlight groups" },
    { "<leader>sM", "<cmd>Telescope man_pages<cr>", desc = "Man Pages" },
    { "<leader>so", "<cmd>Telescope oldfiles<cr>", desc = "Open Recent File" },
    { "<leader>sR", "<cmd>Telescope registers<cr>", desc = "Registers" },
    { "<leader>sg", "<cmd>Telescope live_grep<cr>", desc = "Live Grep" },
    { "<leader>sw", "<cmd>Telescope grep_string<cr>", desc = "Grep String" },
    { "<leader>sk", "<cmd>Telescope keymaps<cr>", desc = "Keymaps" },
    { "<leader>sC", "<cmd>Telescope commands<cr>", desc = "Commands" },
    { "<leader>sl", "<cmd>Telescope resume<cr>", desc = "Resume last search" },
    { "<leader>sc", "<cmd>Telescope git_commits<cr>", desc = "Git commits" },
    { "<leader>sB", "<cmd>Telescope git_branches<cr>", desc = "Git branches" },
    { "<leader>sm", "<cmd>Telescope git_status<cr>", desc = "Git status" },
    { "<leader>sS", "<cmd>Telescope git_stash<cr>", desc = "Git stash" },
    { "<leader>se", "<cmd>Telescope frecency<cr>", desc = "Frecency" },
    { "<leader>sb", "<cmd>Telescope buffers<cr>", desc = "Buffers" },
    { "<leader>sN",
      function()
        require("telescope.builtin").find_files({ cwd = vim.fn.stdpath("listlessneko.config") })
      end,
      desc = "Search Neovim Config",
    },
  },

  -- (g)it
  { "<leader>g",
    group = { name = "Git" },
    { "<leader>gk", "<cmd>lua require 'gitsigns'.prev_hunk({navigation_message = false})<cr>", desc = "Prev Hunk" },
    { "<leader>gl", "<cmd>lua require 'gitsigns'.blame_line()<cr>", desc = "Blame" },
    { "<leader>gp", "<cmd>lua require 'gitsigns'.preview_hunk()<cr>", desc = "Preview Hunk" },
    { "<leader>gr", "<cmd>lua require 'gitsigns'.reset_hunk()<cr>", desc = "Reset Hunk" },
    { "<leader>gR", "<cmd>lua require 'gitsigns'.reset_buffer()<cr>", desc = "Reset Buffer" },
    { "<leader>gj", "<cmd>lua require 'gitsigns'.next_hunk({navigation_message = false})<cr>", desc = "Next Hunk" },
    { "<leader>gs", "<cmd>lua require 'gitsigns'.stage_hunk()<cr>", desc = "Stage Hunk" },
    { "<leader>gu", "<cmd>lua require 'gitsigns'.undo_stage_hunk()<cr>", desc = "Undo Stage Hunk" },
    { "<leader>go", require("telescope.builtin").git_status, desc = "Open changed file" },
    { "<leader>gb", require("telescope.builtin").git_branches, desc = "Checkout branch" },
    { "<leader>gc", require("telescope.builtin").git_commits, desc = "Checkout commit" },
    { "<leader>gC", require("telescope.builtin").git_bcommits, desc = "Checkout commit(for current file)" },
    { "<leader>gd", "<cmd>Gitsigns diffthis HEAD<cr>", desc = "Git Diff" },
    { "<leader>gU", ":UndotreeToggle<CR>", desc = "Toggle UndoTree" },
  },

  -- (l)sp
  { "<leader>l",
    group = { name = "LSP" },
    { "<leader>la", vim.lsp.buf.code_action, desc = "Code Action" },
    -- { "<leader>lA", vim.lsp.buf.range_code_action, desc = "Range Code Actions" },
    { "<leader>ls", vim.lsp.buf.signature_help, desc = "Display Signature Information" },
    { "<leader>lf", vim.lsp.buf.format, desc = "Format" },
    { "<leader>li", require("telescope.builtin").lsp_implementations, desc = "Implementation" },
    -- { "<leader>lh", vim.lsp.inlay_hint.enable(not vim.lsp.inlay_hint.is_enabled()), desc = "Inlay Hints" },
    { "<leader>lw", require("telescope.builtin").diagnostics, desc = "Diagnostics" },
    -- { "<leader>lt", require("telescope").extensions.refactoring.refactors, desc = "Refactor" },
    { "<leader>lc", require("listlessneko.config.utils").copyFilePathAndLineNumber, desc = "Copy File Path and Line Number" },
    -- (w)orkspace
    { "<leader>w",
      group = { name = "Workspace" },
      { "<leader>wa", vim.lsp.buf.add_workspace_folder, desc = "Add Folder" },
      { "<leader>wr", vim.lsp.buf.remove_workspace_folder, desc = "Remove Folder" },
      { "<leader>wl",
        function()
          print(vim.inspect(vim.lsp.buf.list_workspace_folders()))
        end,
        desc = "List Folders",
      },
    },
  },
}
